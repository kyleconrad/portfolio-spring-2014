{
  "name": "gulp-htmlbuild",
  "version": "0.2.0",
  "description": "Extract content from html documents and replace by build result",
  "keywords": [
    "gulpplugin"
  ],
  "homepage": "https://github.com/Janpot/gulp-htmlbuild",
  "bugs": {
    "url": "https://github.com/Janpot/gulp-htmlbuild/issues"
  },
  "author": {
    "url": "https://github.com/Janpot"
  },
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/Janpot/gulp-htmlbuild.git"
  },
  "scripts": {
    "test": "gulp mocha"
  },
  "dependencies": {
    "gulp-util": "~2.2.14",
    "event-stream": "*",
    "through2": "~0.4.1",
    "lazy-flatten-stream": "~0.1.0",
    "pause-stream": "0.0.11",
    "stream-stream": "~1.2.6",
    "readable-stream": "~1.1.10"
  },
  "devDependencies": {
    "mocha": "~1.17.0",
    "chai": "~1.9.0",
    "gulp-load-tasks": "~0.1.1",
    "gulp": "~3.5.2",
    "gulp-mocha": "~0.4.1",
    "gulp-debug": "~0.2.0",
    "gulp-concat": "~2.1.7"
  },
  "engines": {
    "node": ">=0.8.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-htmlbuild [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> Extract content from html documents and replace by build result, analog to grunt-usemin, supports css and js out of the box.\n\n## Warning\n\nI'm still prototyping on this package so expect changes to it's API! Also, I'm open to suggestions.\n\n## Usage\n\nFirst install it\n\n```shell\nnpm install --save-dev gulp-htmlbuild\n```\n\nthen add it to your gulpfile:\n\n\n```js\ngulp.task('build', function () {\n  gulp.src(['./index.html'])\n    .pipe(htmlbuild({\n      // build js with preprocessor\n      js: htmlbuild.preprocess.js(function (block) {\n        \n        // read paths from the [block] stream and build them\n        // ...\n        \n        // then write the build result path to it\n        block.write('buildresult.js');\n        block.end();\n        \n      })\n    }))\n    .pipe(gulp.dest('./build'));\n});\n```\n\n`gulp build` will take `index.html`:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n  </head>\n  <body>\n    \n    <!-- htmlbuild:js -->\n    <script src=\"js/script1.js\"></script>\n    <script src=\"js/script2.js\"></script>\n    <!-- endbuild -->\n    \n  </body>\n</html>\n\n```\n\nAnd turn it into:\n\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n  </head>\n  <body>\n    \n    <script src=\"buildresult.js\"></script>\n    \n  </body>\n</html>\n\n```\n\nYou can find more examples in the `example` folder.\n\n## API\n\n### htmlbuild(options)\n\n#### options\n`options` is an object which maps targets to build functions. the buildfunctions take 1 argument, a stream which represents the block. Read from this stream to get the content of the block and write to it to replace it. the stream also has an `indent` property which is a string containing the indentation of the block directive.\n\n### htmlbuild.preprocess.js(buildFn)\n\na preprocessor you can use to wrap your buildfunction in. It extracts script paths from the block. In this case you also write paths to the block. They will get templated into link elements.\n\n#### buildFn\n\na function that has the same form as a normal buildfunction, only the argument here is a stream that contains script paths. You are expected to write script paths to this stream as well.\n\n### htmlbuild.preprocess.ssc(buildFn)\n\na preprocessor you can use to wrap your buildfunction in. It extracts stylesheet paths from the block. In this case you also write paths to the block. They will get templated into link elements.\n\n#### buildFn\n\na function that has the same form as a normal buildfunction, only the argument here is a stream that contains stylesheet paths. You are expected to write paths to this stream as well.\n\n\n\n## Extended example\n\nexample gulp file:\n\n```javascript\nvar gulp  = require('gulp'),\n    tasks = require('gulp-load-tasks')(),\n    htmlbuild = require('../lib'),\n    es = require('event-stream');\n\n\n// pipe a glob stream into this and receive a gulp file stream\nvar gulpSrc = function (opts) {\n  var paths = es.through();\n  var files = es.through();\n  \n  paths.pipe(es.writeArray(function (err, srcs) {\n    gulp.src(srcs, opts).pipe(files);\n  }));\n  \n  return es.duplex(paths, files);\n};\n\n\nvar jsBuild = es.pipeline(\n  tasks.concat('concat.js'),\n  gulp.dest('./build/js')\n);\n\nvar cssBuild = es.pipeline(\n  tasks.concat('concat.css'),\n  gulp.dest('./build/css')\n);\n\n\ngulp.task('build', function () {\n  \n  gulp.src(['./index.html'])\n    .pipe(htmlbuild({\n      // build js with preprocessor\n      js: htmlbuild.preprocess.js(function (block) {\n        \n        block.pipe(gulpSrc())\n          .pipe(jsBuild);\n        \n        block.end('js/concat.js');\n        \n      }),\n      \n      // build css with preprocessor\n      css: htmlbuild.preprocess.css(function (block) {\n        \n        block.pipe(gulpSrc())\n          .pipe(cssBuild);\n        \n        block.end('css/concat.css');\n        \n      }),\n      \n      // remove blocks with this target\n      remove: function (block) {\n        block.end();\n      },\n      \n      // add a header with this target\n      header: function (block) {\n        es.readArray([\n          '<!--',\n          '  processed by htmlbuild',\n          '-->'\n        ].map(function (str) {\n          return block.indent + str;\n        })).pipe(block);\n      }\n    }))\n    .pipe(gulp.dest('./build'));\n  \n});\n```\n\nit will take following html file\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    \n    <!-- htmlbuild:css -->\n    <link href=\"css/stylesheet1.css\"/>\n    <link href=\"css/stylesheet2.css\"/>\n    <!-- endbuild -->\n    \n  </head>\n  <body>\n  \n    <!-- htmlbuild:header -->\n    <!-- endbuild -->\n  \n    <!-- htmlbuild:js -->\n    <script src=\"js/src1.js\"></script>\n    <script src=\"js/src2.js\"></script>\n    <!-- endbuild -->\n    \n    <!-- htmlbuild:remove -->\n    This will be removed in the build output\n    <!-- endbuild -->\n\n  </body>\n</html>\n```\n\nand turn it into:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    \n    <link rel=\"stylesheet\" href=\"css/concat.css\"/>\n    \n  </head>\n  <body>\n  \n    <!--\n      processed by htmlbuild\n    -->\n  \n    <script src=\"js/concat.js\"></script>\n    \n\n  </body>\n</html>\n```\n\nWhile concatenating stylesheets and scripts on the fly.\n\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-htmlbuild\n[npm-image]: https://badge.fury.io/js/gulp-htmlbuild.png\n\n[travis-url]: http://travis-ci.org/Janpot/gulp-htmlbuild\n[travis-image]: https://secure.travis-ci.org/Janpot/gulp-htmlbuild.png?branch=master\n\n[depstat-url]: https://david-dm.org/Janpot/gulp-htmlbuild\n[depstat-image]: https://david-dm.org/Janpot/gulp-htmlbuild.png?theme=shields.io\n",
  "readmeFilename": "README.md",
  "_id": "gulp-htmlbuild@0.2.0",
  "dist": {
    "shasum": "2e71411844f560ffec1b1222800aef90f82c3c6d"
  },
  "_from": "gulp-htmlbuild@~0.2.0",
  "_resolved": "https://registry.npmjs.org/gulp-htmlbuild/-/gulp-htmlbuild-0.2.0.tgz"
}
